// 깊게 들어가는,
// 한 우물만 판다, 다 팠으면 옆에 우물 건드려보기

#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include<stdlib.h>

#define True 1
#define False 0

#define MAX_VERTICES 50

typedef struct GraphType {
	int n;
	int adj_mat[MAX_VERTICES][MAX_VERTICES];
}GraphType;

int visited[MAX_VERTICES]; // 방문했는지 확인해보는 배열

void init(GraphType* g) {
	g->n = 0;
	for (int i = 0; i < MAX_VERTICES; i++) {
		for (int j = 0; j < MAX_VERTICES; j++) {
			g->adj_mat[i][j] = 0;
		}
	}
}

void insert_vertex(GraphType* g, int n) {
	if (g->n == MAX_VERTICES) {
		printf("overflow");
		return;
	}
	g->n++;
}

void insert_edge(GraphType* g, int start, int end) {
	if (start >= g->n || end >= g->n) {
		printf("vertex index overflow");
		return;
}
	g->adj_mat[start][end] = 1;
	g->adj_mat[end][start] = 1;
}


void dfs_mat(GraphType* g, int v) {
	visited[v] = True;
	printf("visit %d -> ", v);
	for (int i = 0; i < g->n; i++) {
		if (g->adj_mat[v][i] && !visited[i]) {
			dfs_mat(g,i);
		}
	}
}

int main() {
	GraphType* g;
	g = (GraphType*)malloc(sizeof(GraphType));

	init(g);
	for (int i = 0; i < 7; i++) {
		insert_vertex(g, i);
	}
	insert_edge(g, 0, 1);  // 그래프 간선 생성
	insert_edge(g, 0, 2);
	insert_edge(g, 1, 3);
	insert_edge(g, 1, 4);
	insert_edge(g, 2, 5);
	insert_edge(g, 2, 6);
	printf("DFS\n");
	dfs_mat(g, 0);
	printf("\n");

	free(g);
	return 0;
}


