#include <stdio.h>
#include <stdlib.h>
#define SIZE 100

typedef struct StackType {
    char arr[SIZE];
    int top;
} StackType ;

void init(StackType *s){
    s->top = -1;
} 

int is_empty(Stacktype *s){
    if(s->top == -1){
        return 1;
    }
    return 0;
}

int is_full(Stacktype *s){
    if (s->top == (SIZE-1)){
        return 1;
    }
    return 0;
}

void push (Stacktype *s,char value){
    if (is_full(s)){
        printf("Stack is full");
        exit(1);
    }
    s->arr[++(s->top)] = value;
}

char pop (StackType *s){
    if(is_empty(s)){
        printf("Stack is empty");
        exit(1);
    }
    return s->arr[(s->top)--];

}

char peek(StackType *s){
    if(is_empty(&s)){
        printf("Stack is empty");
        exit(1);
    }
    return s->arr[(s->top)];
}

void infix_to_postfix(char exp[]){
    char ch, top_op;
    int len = strlen(exp);
    StackType s;
    init(&s)

    for(int i=0; i<len; i++){
        ch = exp[i];
        switch(ch){
            case '+': case '-': case'*': case'/':
                while(!is_empty(&s) && prec(ch) <= prec(peek(&s)))
                    printf("%c",pop(&s));
                push(&s,ch);
                break;
            case '(':
                push(&s,ch);
                break;
            case ')':
                top_op = pop(&s);
                while(top_op != '(')
                {
                    printf("%c",pop(&s));
                    top_op = pop(&s);
                }
                break;
            default:
                printf("%c",ch);
                break;
        }
    while(!is_empty(&s))
        printf("%c",pop(&s));
    }
}

int main(){

    return 0;
}